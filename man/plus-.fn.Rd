% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R
\name{+.fn}
\alias{+.fn}
\alias{sumfn}
\title{Direct sum of functions}
\usage{
\method{+}{fn}(x1, x2)
}
\arguments{
\item{x1}{function of class \code{obsfn}, \code{prdfn} or \code{parfn}}

\item{x2}{function of class \code{obsfn}, \code{prdfn} or \code{parfn}}
}
\value{
Object of the same class as \code{x1} and \code{x2} which returns results for the
union of conditions.
}
\description{
Used to add prediction function, parameter transformation functions or observation functions.
}
\details{
Each prediction function is associated to a number of conditions. Adding functions
means merging or overwriting the set of conditions.
}
\examples{
# Define a time grid on which to make a prediction by peace-wise linear function.
# Then define a (generic) prediction function based on thid grid.
times <- 0:5
grid <- data.frame(name = "A", time = times, row.names = paste0("p", times))
x <- Xd(grid)

# Define an observable and an observation function
observables <- eqnvec(Aobs = "s*A")
g <- Y(g = observables, f = NULL, states = "A", parameters = "s")

# Collect parameters and define an overarching parameter transformation
# for two "experimental condtions".
dynpars <- attr(x, "parameters")
obspars <- attr(g, "parameters")
innerpars <- c(dynpars, obspars)

trafo <- structure(innerpars, names = innerpars)
trafo_C1 <- replaceSymbols(innerpars, paste(innerpars, "C1", sep = "_"), trafo)
trafo_C2 <- replaceSymbols(innerpars, paste(innerpars, "C2", sep = "_"), trafo)

p <- NULL
p <- p + P(trafo = trafo_C1, condition = "C1")
p <- p + P(trafo = trafo_C2, condition = "C2")

# Collect outer (overarching) parameters and 
# initialize with random values
outerpars <- attr(p, "parameters")
pars <- structure(runif(length(outerpars), 0, 1), names = outerpars)

# Predict internal/unobserved states
out1 <- (x*p)(times, pars)
plot(out1)

# Predict observed states in addition to unobserved
out2 <- (g*x*p)(times, pars)
plot(out2)
}
\seealso{
\link{P}, \link{Y}, \link{Xs}
}
