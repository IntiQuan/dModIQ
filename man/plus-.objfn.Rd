% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R
\name{+.objfn}
\alias{+.objfn}
\alias{sumobjfn}
\title{Direct sum of objective functions}
\usage{
\method{+}{objfn}(x1, x2)
}
\arguments{
\item{x1}{function of class \code{objfn}}

\item{x2}{function of class \code{objfn}}
}
\value{
Object of class \code{objfn}.
}
\description{
Direct sum of objective functions
}
\details{
The objective functions are evaluated and their results as added. Sometimes,
the evaluation of an objective function depends on results that have been computed
internally in a preceding objective function. Therefore, environments are forwarded
and all evaluations take place in the same environment. The first objective function
in a sum of functions generates a new environment.
}
\examples{
  ## Generate three objective functions
  prior <- structure(rep(0, 5), names = letters[1:5])
  
  obj1 <- constraintL2(mu = prior, attr.name = "center")
  obj2 <- constraintL2(mu = prior + 1, attr.name = "right")
  obj3 <- constraintL2(mu = prior - 1, attr.name = "left")
  
  ## Evaluate first objective function on a random vector
  pouter <- prior + rnorm(length(prior))
  print(obj1(pouter))
  
  ## Split into fixed and non-fixed part
  fixed <- pouter[4:5]
  pouter <- pouter[1:3]
  print(obj1(pouter, fixed = fixed))
  
  
  ## Visualize the result by a parameter profile
  myfit <- trust(obj1, pouter, rinit = 1, rmax = 10, fixed = fixed)
  myprof <- profile(obj1, myfit$argument, "a", fixed = fixed)
  plotProfile(myprof)
  
  
  ## Create new objective function by adding the single ones,
  ## then evalue the random vector again
  pouter <- prior + rnorm(length(prior))
  obj <- obj1 + obj2 + obj3
  print(obj(pouter))
}
\seealso{
\link{normL2}, \link{constraintL2}, \link{priorL2}, \link{datapointL2}
}
